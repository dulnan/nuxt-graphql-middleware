// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateSchema > Generates the correct schema. > schema.graphql 1`] = `
"type Mutation {
  login(password: String!, user: String!): User
}

type Query {
  getText: String
  translate(text: String!): String!
}

type User {
  email: String!
  name: String!
}"
`;

exports[`generateTemplates > Generates the correct delarations. > graphql-documents.mjs 1`] = `
"const documents = {
  "query": {
    "translate": "\\n  query translate($text: String!) {\\n    translate(text: $text)\\n  }\\n  ",
    "getText": "query getText {\\n    getText\\n  }"
  },
  "mutation": {
    "login": "\\n  fragment user on User {\\n    name\\n    email\\n  }\\n  mutation login($user: String!, $password: String!) {\\n    login(user: $user, password: $password) {\\n      ...user\\n    }\\n  }\\n  "
  }
};
export { documents };"
`;

exports[`generateTemplates > Generates the correct delarations. > graphql-operations.d.ts 1`] = `
"export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

export type Mutation = {
  __typename?: 'Mutation';
  login?: Maybe<User>;
};


export type MutationLoginArgs = {
  password: Scalars['String']['input'];
  user: Scalars['String']['input'];
};

export type Query = {
  __typename?: 'Query';
  getText?: Maybe<Scalars['String']['output']>;
  translate: Scalars['String']['output'];
};


export type QueryTranslateArgs = {
  text: Scalars['String']['input'];
};

export type User = {
  __typename?: 'User';
  email: Scalars['String']['output'];
  name: Scalars['String']['output'];
};

export type UserFragment = { __typename?: 'User', name: string, email: string };

export type LoginMutationVariables = Exact<{
  user: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type LoginMutation = { __typename?: 'Mutation', login?: { __typename?: 'User', name: string, email: string } | null };

export type TranslateQueryVariables = Exact<{
  text: Scalars['String']['input'];
}>;


export type TranslateQuery = { __typename?: 'Query', translate: string };

export type GetTextQueryVariables = Exact<{ [key: string]: never; }>;


export type GetTextQuery = { __typename?: 'Query', getText?: string | null };
"
`;

exports[`generateTemplates > Generates the correct delarations. > nuxt-graphql-middleware/generated-types.d.ts 1`] = `
"
import type { GraphqlResponse } from '#graphql-middleware-server-options-build'
import type {
  TranslateQuery,
  TranslateQueryVariables,
  GetTextQuery,
  LoginMutation,
  LoginMutationVariables
} from './../graphql-operations'


declare module '#nuxt-graphql-middleware/generated-types' {
  export type GraphqlMiddlewareResponseUnion = TranslateQuery | GetTextQuery | LoginMutation
  export type GraphqlMiddlewareQuery = {
    translate: [TranslateQueryVariables, false, TranslateQuery],
    getText: [null, true, GetTextQuery]
  }

  export type GraphqlMiddlewareMutation = {
    login: [LoginMutationVariables, false, LoginMutation]
  }

}

declare module 'nitropack' {
  interface InternalApi {
    '/api/graphql_middleware/query/translate': {
      'default': GraphqlResponse<TranslateQuery>
    }
    '/api/graphql_middleware/query/getText': {
      'default': GraphqlResponse<GetTextQuery>
    }
    '/api/graphql_middleware/mutation/login': {
      'default': GraphqlResponse<LoginMutation>
    }
  }
}
"
`;
