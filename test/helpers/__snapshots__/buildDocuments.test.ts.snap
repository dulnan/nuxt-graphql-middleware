// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`buildDocuments > Reads and build the documents by pattern 1`] = `
[
  {
    "content": "mutation initState {
  initState
}",
    "filename": "mutation.initState.graphql",
  },
  {
    "content": "query testClientOptions($path: String!) {
  testClientOptions(path: $path) {
    language
  }
}",
    "filename": "query.testClientOptions.graphql",
  },
  {
    "content": "query getCurrentTime {
  time: getCurrentTime
}",
    "filename": "query.getCurrentTime.graphql",
  },
  {
    "content": "query fetchOptions {
  testFetchOptions {
    headerClient
    headerServer
  }
}",
    "filename": "query.fetchOptions.graphql",
  },
  {
    "content": "query fetchOptionsComposable {
  headerValueFromComposable: getRequestHeader(
    name: "x-nuxt-header-client-from-composable"
  )
  headerValueFromPlugin: getRequestHeader(name: "x-nuxt-header-client")
}",
    "filename": "query.fetchOptionsComposable.graphql",
  },
  {
    "content": "fragment user on User {
  id
  firstName
  lastName
  email
  description
  dateOfBirth
}


query queryOne {
  one: users {
    ...user
  }
}

query queryTwo {
  two: users {
    ...user
  }
}

#query queryThree {
#  three: users {
#    ...user
#  }
#}

fragment foobarQuery on Query {
  foobar: users {
    id
    ...foobarUser
  }
}

fragment foobarUser on User {
  firstName
}",
    "filename": "multipleQueries.graphql",
  },
  {
    "content": "mutation deleteUser($id: Int!) {
  deleteUser(id: $id)
}",
    "filename": "mutation.deleteUser.graphql",
  },
  {
    "content": "mutation triggerError {
  triggerError
}",
    "filename": "mutation.triggerError.graphql",
  },
  {
    "content": "query getError {
  getError
}",
    "filename": "query.getError.graphql",
  },
  {
    "content": "query simulateEndpointDown {
  testFetchOptions {
    headerClient
    headerServer
  }
}",
    "filename": "query.simulateEndpointDown.graphql",
  },
  {
    "content": "mutation testFormSubmit($input: FormSubmissionInput!) {
  submitForm(input: $input)
}",
    "filename": "mutation.testFormSubmit.graphql",
  },
  {
    "content": "mutation testUpload($file: Upload!) {
  uploadFile(file: $file)
}",
    "filename": "mutation.testUpload.graphql",
  },
  {
    "content": "query getSubmissions {
  getSubmissions {
    ...formSubmission
  }
}

fragment formSubmission on FormSubmission {
  id
  firstName
  lastName
  documents {
    name
    file {
      name
      id
      content
    }
  }
}",
    "filename": "query.getSubmissions.graphql",
  },
  {
    "content": "fragment user on User {
  id
  firstName
  lastName
  email
  description
  dateOfBirth
}


query foobar {
  users {
    ...user
  }
}",
    "filename": "test.graphql",
  },
  {
    "content": "fragment user on User {
  id
  firstName
  lastName
  email
  description
  dateOfBirth
}


mutation addUser($user: UserData!) {
  createUser(user: $user) {
    ...user
  }
}",
    "filename": "mutation.addUser.graphql",
  },
  {
    "content": "fragment user on User {
  id
  firstName
  lastName
  email
  description
  dateOfBirth
}


query userById($id: ID!) {
  userById(id: $id) {
    ...user
  }
}",
    "filename": "query.user.graphql",
  },
  {
    "content": "fragment user on User {
  id
  firstName
  lastName
  email
  description
  dateOfBirth
}",
    "filename": "user.fragment.graphql",
  },
  {
    "content": "fragment user on User {
  id
  firstName
  lastName
  email
  description
  dateOfBirth
}


query users {
  users {
    ...user
  }
}",
    "filename": "userList.graphql",
  },
  {
    "content": "fragment depthOneQuery on Query {
  one: users {
    ...depthOneUser
  }
}",
    "filename": "fragment.depthOne.graphql",
  },
  {
    "content": "fragment depthOneUser on User {
  firstName
  friends {
    ...depthTwoUser
  }
}",
    "filename": "fragment.depthOneUser.graphql",
  },
  {
    "content": "fragment depthTwoUser on User {
  firstName
}",
    "filename": "fragment.depthTwoUser.graphql",
  },
  {
    "content": "query highDepthOne {
  ...depthOneQuery
  one: users {
    ...depthOneUser
  }
}",
    "filename": "query.highDepthFragments.graphql",
  },
]
`;

exports[`buildDocuments > Reads and builds the documents from nuxt.config.ts 1`] = `
[
  {
    "content": "query foobar {
        field
      }",
    "filename": "nuxt.config.ts",
  },
]
`;
