import type { Types } from '@graphql-codegen/plugin-helpers'
import type { SchemaASTConfig } from '@graphql-codegen/schema-ast'
import type { GeneratorOptions } from 'graphql-typescript-deluxe'

export interface ModuleOptions {
  /**
   * File glob patterns for the auto import feature.
   *
   * If left empty, no documents are auto imported.
   *
   * @default
   * ```json
   * ["**\/.{gql,graphql}", "!node_modules"]
   * ```
   *
   * @example
   * ```ts
   * // Load .graphql files from pages folder and from a node_modules dependency.
   * const autoImportPatterns = [
   *   './pages/**\/*.graphql',
   *   'node_modules/my_library/dist/**\/*.graphql'
   * ]
   * ```
   */
  autoImportPatterns?: string[]

  /**
   * The path where your graphql.config.ts is, relative to the location of nuxt.config.ts.
   *
   * Used to generate the correct paths in the graphql.config.ts file generated by the module.
   *
   * @default "./graphql.config.ts"
   */
  graphqlConfigFilePath?: string

  /**
   * Additional raw documents to include.
   *
   * Useful if for example you need to generate queries during build time.
   *
   * @default []
   *
   * @example
   * ```ts
   * const documents = [`
   *   query myQuery {
   *     articles {
   *       title
   *       id
   *     }
   *   }`,
   *   ...getGeneratedDocuments()
   * ]
   * ```
   */
  documents?: string[]

  /**
   * Wether the useGraphqlQuery, useGraphqlMutation and useGraphqlState
   * composables should be included.
   *
   * @default ```ts
   * true
   * ```
   */
  includeComposables?: boolean

  /**
   * Enable support for uploading files via GraphQL.
   *
   * When enabled, an additional `useGraphqlUploadMutation` composable is
   * included, in addition to a new server endpoint that handles multi part
   * file uploads for GraphQL mutations.
   */
  enableFileUploads?: boolean

  /**
   * Enable detailled debugging messages.
   *
   * @default false
   */
  debug?: boolean

  /**
   * Displays GraphQL response errors in an overlay in dev mode.
   */
  errorOverlay?: boolean

  /**
   * The URL of the GraphQL server.
   *
   * For the runtime execution you can provide a method that determines the endpoint
   * during runtime. See the server/graphqlMiddleware.serverOptions.ts documentation
   * for more information.
   */
  graphqlEndpoint: string

  /**
   * Download the GraphQL schema and store it on disk.
   *
   * Usually you'll want to only enable this during dev mode.
   *
   * @default true
   */
  downloadSchema?: boolean

  /**
   * Path to the GraphQL schema file.
   *
   * If `downloadSchema` is `true`, the downloaded schema is written to this specified path.
   * If `downloadSchema` is `false`, this file must be present in order to generate types.
   *
   * @default './schema.graphql'
   */
  schemaPath?: string

  /**
   * The prefix for the server route.
   *
   * @default ```ts
   * "/api/graphql_middleware"
   * ```
   */
  serverApiPrefix?: string

  /**
   * Logs only errors.
   *
   * When enabled only errors are logged to the console when generating the GraphQL operations.
   * If false, all operations are logged, including valid ones.
   */
  logOnlyErrors?: boolean

  /**
   * Options for graphql-typescript-deluxe code generator.
   *
   * @see [GeneratorOptions](https://github.com/dulnan/graphql-typescript-deluxe/blob/main/src/types/options.ts#L193)
   */
  codegenConfig?: GeneratorOptions

  /**
   * Configuration for graphql-codegen when downloading the schema.
   */
  codegenSchemaConfig?: {
    /**
     * Configure how the schema.graphql file should be generated.
     *
     * @see [SchemaASTConfig](https://github.com/dotansimha/graphql-code-generator/blob/master/packages/plugins/other/schema-ast/src/index.ts#L23)
     */
    schemaAstConfig?: SchemaASTConfig

    /**
     * Configure how the schema-ast introspection request should be made.
     *
     * Usually this is where you can provide a custom authentication header:
     *
     * ```typescript
     * const codegenSchemaConfig = {
     *   urlSchemaOptions: {
     *     headers: {
     *       authentication: 'foobar',
     *     }
     *   }
     * }
     * ```
     *
     * @see [Types.UrlSchemaOptions](https://github.com/dotansimha/graphql-code-generator/blob/master/packages/utils/plugins-helpers/src/types.ts#L82)
     */
    urlSchemaOptions?: Types.UrlSchemaOptions
  }

  /**
   * Set to true if you want to output each compiled query and mutation in the
   * .nuxt folder.
   * Set to a path to output to a custom path.
   */
  outputDocuments?: boolean | string

  /**
   * Enable Nuxt DevTools integration.
   */
  devtools?: boolean

  /**
   * Client caching configuration.
   */
  clientCache?: {
    enabled?: boolean
    maxSize?: number
  }
}
